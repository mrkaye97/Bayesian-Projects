prob  <- exp(a+b*x) / (1 + exp(a+b*x))
like  <- sum(dbinom(1, size = 1, prob = prob, log = TRUE))
prior <- sum(dnorm(c(a, b), mean = 0, sd = 25, log = TRUE))
posterior <- prior + like
return(posterior)
}
challenger <- read.csv("https://aloy.rbind.io/data/challenger.csv")
y <- challenger$oring
x <- challenger$temp
n <- 10000             # number of proposal draws
acc <- rep(0, 2)       # keep track of no. accepted proposals for each param
att <- rep(0, 2)       # keep track of no. attempted proposals for each param
cand.sd <- c(0.5, 0.5) # sd of jump distributions
draws <- matrix(NA, nrow = n, ncol = 2)
colnames(draws) <- c("alpha", "beta")
draws[1,] <- rnorm(2)
# Calculate log ratio of posterior densities
logr <- log_posterior(current, y, x) - log_posterior(current, y, x)
current <- draws[i-1,]
View(challenger)
View(draws)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
log_posterior <- function(params, y, x){
a <- params[1]
b <- params[2]
prob  <- exp(a+b*x) / (1 + exp(a+b*x))
like  <- sum(dbinom(1, size = 1, prob = prob, log = TRUE))
prior <- sum(dnorm(c(a, b), mean = 0, sd = 25, log = TRUE))
posterior <- prior + like
return(posterior)
}
challenger <- read.csv("https://aloy.rbind.io/data/challenger.csv")
y <- challenger$oring
x <- challenger$temp
n <- 10000             # number of proposal draws
acc <- rep(0, 2)       # keep track of no. accepted proposals for each param
att <- rep(0, 2)       # keep track of no. attempted proposals for each param
cand.sd <- c(0.5, 0.5) # sd of jump distributions
draws <- matrix(NA, nrow = n, ncol = 2)
colnames(draws) <- c("alpha", "beta")
draws[1,] <- rnorm(2)
for (i in 2:n) {
current <- draws[i-1,]
for(j in 1:2){
att[j] <- att[j] + 1 # increasing attempts by 1
# Draw a candidate for parameter j
proposed <- current
proposed[j] <- rnorm(1, mean = current[j], sd = cand.sd[j])
# Calculate log ratio of posterior densities
logr <- log_posterior(proposed, y, x) - log_posterior(current, y, x)
# Calculate acceptance probability
R <- exp(logr)
# Acccept or reject
if(R > runif(1)) {
current <- proposed
acc[j] <- acc[j] + 1
}
}
# store the beta draws from this step
draws[i, ] <- current
}
log_posterior(proposed, y, x)
proposed
exp(proposed[1] + proposed[2]*x)
exp(proposed[1] + proposed[2]*y)
temp1 <- exp(proposed[1] + proposed[2]*x)
temp2 <- exp(proposed[1] + proposed[2]*y)
temp1-temp2
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list = ls())
library(tidyverse)
library(rethinking)
data(Howell1)
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed(1000)
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[i,]
d2 <- d[-i,]
knitr::kable(precis(mod.w.seychelles)@output, format = 'markdown', align = 'c', digits = 3, title = 'with Seychelles')
rm(list = ls())
data(rugged)
w.seychelles <- rugged %>%
mutate(log.gdp = log(rgdppc_2000)) %>%
select(country, log.gdp, cont_africa, rugged) %>%
na.omit()
wo.seychelles <- w.seychelles %>%
filter(country != "Seychelles")
mod.w.seychelles <- map(
alist(
log.gdp ~ dnorm( mu , sigma ) ,
mu <- a + bR*rugged + bA*cont_africa + bAR*cont_africa*rugged,
a ~ dnorm( 8 , 100 ) ,
bR ~ dnorm( 0 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
bAR ~ dnorm( 0, 1 ),
sigma ~ dunif( 0 , 10 )
), data=w.seychelles, method = "Nelder-Mead", start = list(a = 10 , bR = 0, bA = -2, bAR = 0, sigma =1 )
)
mod.wo.seychelles <- map(
alist(
log.gdp ~ dnorm( mu , sigma ) ,
mu <- a + bR*rugged + bA*cont_africa + bAR*cont_africa*rugged,
a ~ dnorm( 8 , 100 ) ,
bR ~ dnorm( 0 , 1 ) ,
bA ~ dnorm( 0 , 1 ) ,
bAR ~ dnorm( 0, 1 ),
sigma ~ dunif( 0 , 10 )
), data=wo.seychelles, method = "Nelder-Mead", start = list(a = 10 , bR = 0, bA = -2, bAR = 0, sigma =1 )
)
knitr::kable(precis(mod.w.seychelles)@output, format = 'markdown', align = 'c', digits = 3, title = 'with Seychelles')
knitr::kable(precis(mod.wo.seychelles)@output, format = 'markdown', align = 'c', digits = 3, title = 'without Seychelles')
knitr::kable(compare(mod.w.seychelles, mod.wo.seychelles)@output, format = 'markdown', align = 'c', digits = 3)
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4))
knitr::kable(precis(mod.bed)@output, format = 'markdown', align = 'c')
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4) )
c <- compare(mod.bed, mod.nobed)
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
c <- compare(mod.bed, mod.nobed)
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4))
knitr::kable(precis(mod.bed)@output, format = 'markdown', align = 'c')
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4))
knitr::kable(precis(mod.bed)@output, format = 'markdown', align = 'c')
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
c <- compare(mod.bed, mod.nobed)
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
c <- compare(mod.bed, mod.nobed)
c <- compare(mod.bed, mod.nobed)
c <- compare(mod.bed, mod.nobed)
c <- compare(mod.bed, mod.nobed)
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4))
knitr::kable(precis(mod.bed)@output, format = 'markdown', align = 'c')
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df , method="Nelder-Mead" , control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
c <- compare(mod.bed, mod.nobed)
?compare
c <- rethinking::compare(mod.bed, mod.nobed)
?loo
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , control=list(maxit=1e4))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , control=list(maxit=1e4), start = list(a = 0, bW = 0, bS = 0, bWS = 0, bBa = 0, bBb = 0, sigma = sd(df$blooms)))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, bBa = 0, bBb = 0, sigma = sd(df$blooms)))
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df, control=list(maxit=1e4), start = list(sigma = sd(df$blooms)) )
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df, control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, sigma = sd(df$blooms)) )
c <- rethinking::compare(mod.bed, mod.nobed)
?c
rm(list = ls())
set.seed(646)
data(tulips)
df <- tulips %>%
mutate(bedA = ifelse(bed == 'a', 1, 0),
bedB = ifelse(bed == 'b', 1, 0),
shade = shade - mean(shade),
water = water - mean(water))
mod.bed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade + bBa*bedA + bBb*bedB ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
bBa ~ dnorm(0, 100),
bBb ~ dnorm(0, 100),
sigma ~ dunif( 0 , 100 )
),
data=df , control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, bBa = 0, bBb = 0, sigma = sd(df$blooms)))
knitr::kable(precis(mod.bed)@output, format = 'markdown', align = 'c')
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df, control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, sigma = sd(df$blooms)) )
temp <- rethinking::compare(mod.bed, mod.nobed)
knitr::kable(c@output, format = 'markdown', align = 'c', digits = 3)
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df, control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, sigma = sd(df$blooms)) )
temp <- rethinking::compare(mod.bed, mod.nobed)
knitr::kable(temp@output, format = 'markdown', align = 'c', digits = 3)
knitr::kable(precis(mod.nobed)@output, format = 'markdown', align = 'c', digits = 3)
mod.nobed <- rethinking::map(
alist(
blooms ~ dnorm( mu , sigma ) ,
mu <- a + bW*water + bS*shade + bWS*water*shade ,
a ~ dnorm( 0 , 100 ) ,
bW ~ dnorm( 0 , 100 ) ,
bS ~ dnorm( 0 , 100 ) ,
bWS ~ dnorm( 0 , 100 ) ,
sigma ~ dunif( 0 , 100 )
),
data=df, control=list(maxit=1e4), start = list(a = mean(df$blooms), bW = 0, bS = 0, bWS = 0, sigma = sd(df$blooms)) )
temp <- rethinking::compare(mod.bed, mod.nobed)
knitr::kable(temp@output, format = 'markdown', align = 'c', digits = 3)
knitr::kable(precis(mod.nobed)@output, format = 'markdown', align = 'c', digits = 3)
grid <- data.frame(age = seq(-1.5, 3, length.out = 1000))
mods <- c(m1, m2, m3, m4, m5, m6)
m1 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, sigma = sd(d1$height)))
data(Howell1)
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed(1000)
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[i,]
d2 <- d[-i,]
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list = ls())
library(tidyverse)
library(rethinking)
m1 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, sigma = sd(d1$height)))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rm(list = ls())
library(tidyverse)
library(rethinking)
data(Howell1)
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed(1000)
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[i,]
d2 <- d[-i,]
m1 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, sigma = sd(d1$height)))
m2 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age + b2*age^2,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
), data = d1, start = list(a = 0, b1 = 0, b2 = 0, sigma = sd(d1$height)))
m3 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age + b2*age^2 + b3*age^3,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, sigma = sd(d1$height)))
m4 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age + b2*age^2 + b3*age^3 + b4*age^4,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, sigma = sd(d1$height)))
m5 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age + b2*age^2 + b3*age^3 + b4*age^4 + b5*age^5,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1)
m6 <- rethinking::map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1*age + b2*age^2 + b3*age^3 + b4*age^4 + b5*age^5 + b6*age^6,
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
b6 ~ dnorm(0, 100),
sigma ~ dunif(0 , 50)), data = d1, start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, sigma = sd(d1$height)))
